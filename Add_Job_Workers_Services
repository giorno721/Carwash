import tkinter as tk
from tkinter import *
from tkinter import ttk 
from PIL import Image, ImageTk
import ttkbootstrap as ttkbootstrap
from ttkbootstrap.constants import *
import emoji
from datetime import datetime, timedelta
import json
import os
from tkinter import messagebox

def add_worker():
    add_worker_window_root = tk.Toplevel(root)
    add_worker_window_root.title("Add Worker")
    
    add_worker_window = tk.Frame(add_worker_window_root, padx=10, pady=10, bg="white")
    add_worker_window.pack(fill=tk.BOTH, expand=True)

    first_name_label = ttk.Label(add_worker_window, text="First Name:")
    first_name_label.grid(row=0, column=0)
    first_name_entry = ttk.Entry(add_worker_window)
    first_name_entry.grid(row=0, column=1, pady=(0,10))

    last_name_label = ttk.Label(add_worker_window, text="Last Name:")
    last_name_label.grid(row=1, column=0)
    last_name_entry = ttk.Entry(add_worker_window)
    last_name_entry.grid(row=1, column=1, pady=(0,10))

    def add_button_click():
        first_name = first_name_entry.get()
        last_name = last_name_entry.get()
        if not first_name or not last_name:  
            messagebox.showwarning("Warning", "Fill in all fields!")
            return 
        workers_listbox.insert(tk.END, f'{first_name} {last_name}')
        workers.append(Worker(first_name, last_name))
        add_worker_window_root.destroy()  

    add_btn = ttk.Button(add_worker_window, text="Add", command=add_button_click, width=10)
    add_btn.grid(row=6, column=0, columnspan=2, sticky="e")
def add_service():
    add_service_window_root = tk.Toplevel(root)
    add_service_window_root.title("Add Service")
    
    add_service_window = tk.Frame(add_service_window_root, padx=10, pady=10, bg="white")
    add_service_window.pack(fill=tk.BOTH, expand=True)

    service_name_label = ttk.Label(add_service_window, text="Service Name:")
    service_name_label.grid(row=0, column=0)
    service_name_entry = ttk.Entry(add_service_window)
    service_name_entry.grid(row=0, column=1, pady=(0,10))

    service_price_label = ttk.Label(add_service_window, text="Price:")
    service_price_label.grid(row=1, column=0)
    service_price_entry = ttk.Entry(add_service_window)
    service_price_entry.grid(row=1, column=1, pady=(0,10))

    def add_button_click():
        service_name = service_name_entry.get()
        service_price = service_price_entry.get()
        if not service_name or not service_price:  
            messagebox.showwarning("Warning", "Fill in all fields!")
            return 
        if not isinstance(service_price, float) and not isinstance(service_price, int):
            messagebox.showinfo("Error", "Price should be a number.")
            return
        services_listbox.insert(tk.END, f"{service_name:<20} {service_price:<3} UAH")
        services.append(Service(service_name, service_price))
        add_service_window_root.destroy()  

    add_btn = ttk.Button(add_service_window, text="Add", command=add_button_click, width=10)
    add_btn.grid(row=6, column=0, columnspan=2, sticky="e")
def add_job():
    add_job_window_root = tk.Toplevel(root)
    add_job_window_root.title("Add Job")
    
    add_job_window = tk.Frame(add_job_window_root, padx=10, pady=10, bg="white")
    add_job_window.pack(fill=tk.BOTH, expand=True)

    current_time = datetime.now().strftime("%I:%M %p")
    job_time_label = ttk.Label(add_job_window, text="Job Start Time:")
    job_time_label.grid(row=0, column=0)
    job_time_entry = ttk.Entry(add_job_window)
    job_time_entry.insert(tk.END, current_time)
    job_time_entry.grid(row=0, column=1, pady=(0,10))

    job_end_time_label = ttk.Label(add_job_window, text="Job End Time:")
    job_end_time_label.grid(row=1, column=0)
    job_end_time_entry = ttk.Entry(add_job_window)
    job_end_time_entry.insert(tk.END, (datetime.strptime(current_time, "%I:%M %p")+ timedelta(minutes=30)).strftime("%I:%M %p"))
    job_end_time_entry.grid(row=1, column=1, pady=(0,10))

    services_label = ttk.Label(add_job_window, text="Services:")
    services_label.grid(row=2, column=0, sticky="w")
    services_checkboxes = []
    for i in range(len(services)):
        services_checkboxes.append(tk.IntVar())
        check_button = tk.Checkbutton(add_job_window, text=(services[i].name), variable=services_checkboxes[i])
        check_button.grid(row=i+2, column=1, pady=(0,10), sticky="w")

    workers_label = ttk.Label(add_job_window, text="Workers:")
    workers_label.grid(row=len(services) + 2, column=0, sticky="w")
    workers_checkboxes = []
    for i in range(len(workers)):
        workers_checkboxes.append(tk.IntVar())
        check_button = tk.Checkbutton(add_job_window, text=str(workers[i]), variable=workers_checkboxes[i])
        check_button.grid(row=len(services)+i+2, column=1, pady=(0,10), sticky="w")

    def add_button_click():
        if not job_time_entry.get() or not job_end_time_entry.get():  
            messagebox.showwarning("Warning", "Fill in all fields!")
            return 
        if not is_valid_time_format(job_time_entry.get()) or not is_valid_time_format(job_end_time_entry.get()):
            messagebox.showwarning("Warning", "Wrong time format!")
            return 
        if is_earlier_time(job_end_time_entry.get(), job_time_entry.get()):
            messagebox.showwarning("Warning", "Job end time can't be before its start time:)")
            return 
        
        for i in range(len(workers)):
            if workers_checkboxes[i].get() == 1:
                if not is_worker_available(workers[i], job_time_entry.get()):
                    messagebox.showwarning("Warning", f"The worker {workers[i]} isn't available at the moment")
                    return 

        at_least_one_worker_checked = FALSE
        at_least_one_service_checked = FALSE

        for i in range(len(workers)):
            if workers_checkboxes[i].get() == 1:
                at_least_one_worker_checked = TRUE

        for i in range(len(services)):
            if services_checkboxes[i].get() == 1:
                at_least_one_service_checked = TRUE

        if at_least_one_service_checked == FALSE or at_least_one_worker_checked == FALSE:
            messagebox.showwarning("Warning", "You must pick at least one worker and at least one service")
            return 

        job = Job(datetime.now(), datetime.now() + timedelta(minutes=30), [], [])
        job.start_time = job_time_entry.get()
        job.end_time = job_end_time_entry.get()
       
        for i in range(len(workers)):
            if workers_checkboxes[i].get() == 1:
                job.workers.append(workers[i])


        for i in range(len(services)):
            if services_checkboxes[i].get() == 1:
                job.services.append(services[i])

        job_services_str = ""
        for item in job.services:
            job_services_str += f'{item.name}; '

        job_workers_str = ""
        for item in job.workers:
            job_workers_str += f'{item.first_name} {item.last_name}; '
        jobs_tree.insert("", "end", values=(f"{datetime.strptime(job.start_time, '%I:%M %p').strftime('%I:%M %p')} - {datetime.strptime(job.end_time, '%I:%M %p').strftime('%I:%M %p')}", job_services_str, job_workers_str))
        jobs.append(job)
        add_job_window_root.destroy()  

    add_btn = ttk.Button(add_job_window, text="Add", command=add_button_click, width=10)
    add_btn.grid(row=len(workers) + len(services) + 2, column=0, columnspan=2, sticky="e")
